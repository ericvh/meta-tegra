From ef0c9ee29a85b5199bebb4bf097b2d3621780df7 Mon Sep 17 00:00:00 2001
From: Matt Madison <matt@madison.systems>
Date: Sat, 14 Mar 2020 07:16:38 -0700
Subject: [PATCH] Fix mapping of library paths for jetson mounts

---
 src/jetson_mount.c | 46 +++++++++++++++++++++++++++++++++++-----------
 src/jetson_mount.h |  2 +-
 src/nvc_mount.c    |  6 +++---
 3 files changed, 39 insertions(+), 15 deletions(-)

diff --git a/src/jetson_mount.c b/src/jetson_mount.c
index dff9c97..eaf3289 100644
--- a/src/jetson_mount.c
+++ b/src/jetson_mount.c
@@ -20,12 +20,13 @@
 #include "jetson_mount.h"
 
 char **
-mount_jetson_files(struct error *err, const char *root, const struct nvc_container *cnt, char *paths[], size_t size)
+mount_jetson_files(struct error *err, const char *root, const struct nvc_container *cnt, const char *dir, char *paths[], size_t size)
 {
         char src[PATH_MAX];
         char dst[PATH_MAX];
         mode_t mode;
         char **mnt, **ptr;
+        char *file;
 
         mnt = ptr = array_new(err, size + 1); /* NULL terminated. */
         if (mnt == NULL)
@@ -34,12 +35,26 @@ mount_jetson_files(struct error *err, const char *root, const struct nvc_contain
         for (size_t i = 0; i < size; ++i) {
                 if (path_new(err, src, root) < 0)
                         goto fail;
-                if (path_new(err, dst, cnt->cfg.rootfs) < 0)
-                        goto fail;
-
+                if (dir != NULL) {
+                        if (strstr(paths[i], "/gstreamer-1.0") != NULL) {
+                                char tmp[PATH_MAX];
+                                if (path_join(err, tmp, dir, "/gstreamer-1.0") < 0)
+                                        goto fail;
+                                if (path_resolve_full(err, dst, cnt->cfg.rootfs, tmp) < 0)
+                                        goto fail;
+                        } else {
+                                if (path_resolve_full(err, dst, cnt->cfg.rootfs, dir) < 0)
+                                        goto fail;
+                        }
+                } else {
+                        if (path_new(err, dst, cnt->cfg.rootfs) < 0)
+                                goto fail;
+                }
+
+                file = basename(paths[i]);
                 if (path_append(err, src, paths[i]) < 0)
                         goto fail;
-                if (path_append(err, dst, paths[i]) < 0)
+                if (path_append(err, dst, (dir == NULL ? paths[i] : file)) < 0)
                         goto fail;
 
                 if (file_mode(err, src, &mode) < 0)
@@ -71,22 +86,31 @@ create_jetson_symlinks(struct error *err, const char *root, const struct nvc_con
         char src[PATH_MAX];
         char src_lnk[PATH_MAX];
         char dst[PATH_MAX];
+        char *file;
 
         for (size_t i = 0; i < size; ++i) {
+                file = basename(paths[i]);
                 if (path_new(err, src, root) < 0)
                         return (-1);
-                if (path_new(err, dst, cnt->cfg.rootfs) < 0)
-                        return (-1);
-
                 if (path_append(err, src, paths[i]) < 0)
                         return (-1);
-                if (path_append(err, dst, paths[i]) < 0)
-                        return (-1);
 
                 if (resolve_symlink(err, src, src_lnk) < 0)
                         return (-1);
 
-                printf("src: %s, src_lnk: %s, dst: %s, dst_lnk: %s\n", src, src_lnk, dst);
+                if (str_has_prefix(file, "lib")) {
+                        if (path_resolve_full(err, dst, cnt->cfg.rootfs, cnt->cfg.libs_dir) < 0)
+                                return (-1);
+                        if (path_append(err, dst, file) < 0)
+                                return (-1);
+                } else {
+                        if (path_new(err, dst, cnt->cfg.rootfs) < 0)
+                                return (-1);
+                        if (path_append(err, dst, paths[i]) < 0)
+                                return (-1);
+                }
+
+                printf("src: %s, src_lnk: %s, dst: %s\n", src, src_lnk, dst);
                 if (remove(dst) < 0 && errno != ENOENT)
                         return (-1);
 
diff --git a/src/jetson_mount.h b/src/jetson_mount.h
index 76ade6a..a7b390f 100644
--- a/src/jetson_mount.h
+++ b/src/jetson_mount.h
@@ -11,7 +11,7 @@
 int resolve_symlink(struct error *, const char *, char *);
 void unmount(const char *);
 
-char **mount_jetson_files(struct error *, const char *, const struct nvc_container *, char * [], size_t);
+char **mount_jetson_files(struct error *, const char *, const struct nvc_container *, const char *, char * [], size_t);
 int create_jetson_symlinks(struct error *, const char *, const struct nvc_container *, char * [], size_t);
 
 #endif /* HEADER_JETSON_MOUNT_H */
diff --git a/src/nvc_mount.c b/src/nvc_mount.c
index 61af23d..67ac414 100644
--- a/src/nvc_mount.c
+++ b/src/nvc_mount.c
@@ -486,15 +486,15 @@ nvc_driver_mount(struct nvc_context *ctx, const struct nvc_container *cnt, const
 
         log_info("mount jetson libraries");
         if (info->jetson->libs != NULL && info->jetson->nlibs > 0) {
-                if ((tmp = (const char **)mount_jetson_files(&ctx->err, ctx->cfg.root, cnt, info->jetson->libs, info->jetson->nlibs)) == NULL)
+                if ((tmp = (const char **)mount_jetson_files(&ctx->err, ctx->cfg.root, cnt, cnt->cfg.libs_dir, info->jetson->libs, info->jetson->nlibs)) == NULL)
                         goto fail;
                 ptr = array_append(ptr, tmp, array_size(tmp));
                 free(tmp);
         }
 
         log_info("mount jetson dirs");
-        if (info->jetson->libs != NULL && info->jetson->nlibs > 0) {
-                if ((tmp = (const char **)mount_jetson_files(&ctx->err, ctx->cfg.root, cnt, info->jetson->dirs, info->jetson->ndirs)) == NULL)
+        if (info->jetson->dirs != NULL && info->jetson->ndirs > 0) {
+                if ((tmp = (const char **)mount_jetson_files(&ctx->err, ctx->cfg.root, cnt, NULL, info->jetson->dirs, info->jetson->ndirs)) == NULL)
                         goto fail;
                 ptr = array_append(ptr, tmp, array_size(tmp));
                 free(tmp);
